##############################
Ansible Playbooks: The Basics
##############################
Our company has been increasing the deployment of small brochure-style websites for clients. The head of IT has decided that each client should have their own web server, for better client isolation, and has tasked us with creating concept automation to quickly deploy web-nodes with simple static website content.

"Ansible playbook overview: An Ansible playbook is an organized unit of scripts that defines work for a server configuration managed by the automation tool Ansible. Ansible is a configuration management tool that automates the configuration of multiple servers by the use of Ansible playbooks. ... Ansible plays are written in YAML."

Create an inventory in /home/ansible/inventory That Contains a Host Group Named web. The web Group Should Contain node1 and node2
Use Vim to create the inventory file:

[ansible@control1]$ echo "[web]" >> /home/ansible/inventory

It should contain this when we're done:

[web]
node1
node2

Create a Playbook in /home/ansible/web.yml
Using Vim, we'll create our web.yml file with these contents:

---
- hosts: web
  become: yes
  tasks:
    - name: install httpd
      yum: name=httpd state=latest
    - name: start and enable httpd
      service: name=httpd state=started enabled=yes
    - name: retrieve website from repo
      get_url: url=http://repo.example.com/website.tgz dest=/tmp/website.tgz
    - name: install website
      unarchive: remote_src=yes src=/tmp/website.tgz dest=/var/www/html/

Verify the Work by Executing the Playbook Using the Inventory

[ansible@control1]$ ansible-playbook -i /home/ansible/inventory /home/ansible/web.yml

###################################
Ansible Playbooks - Error Handling
###################################
We have to set up automation to pull down a data file, from a notoriously unreliable third-party system, for integration purposes. Create a playbook that attempts to pull down http://apps.l33t.com/transaction_list to localhost. The playbook should gracefully handle the site being down by outputting the message "l33t.com appears to be down. Try again later." to stdout. If the task succeeds, the playbook should write "File downloaded." to stdout. No matter if the playbook errors or not, it should always output "Attempt completed." to stdout.

If the report is collected, the playbook should write and edit the file to replace all occurrences of #BLANKLINE with a line break \n.

Create a playbook: /home/ansible/report.yml
Create the file with an echo command:

[ansible@control1]$ echo "---" >> /home/ansible/report.yml

Using a text editor, such as vim, edit /home/ansible/report.yml

[ansible@control1]$ vim /home/ansible/report.yml

Configure the Playbook to Download a File and Output a Message
First, we'll specify our host and tasks (name, and debug message):

---
- hosts: localhost
  tasks:
    - name: download tranaction_list
      get_url:
        url: http://apps.l33t.com/transaction_list
        dest: /home/ansible/transaction_list
    - debug: msg="File downloaded"
Reconfigure the Playbook to Handle Connection Failure by Outputting a Message
We need to reconfigure a bit here, adding a block keyword and a rescue, in case the URL we're reaching out to is down:

---
- hosts: localhost
  tasks:
    - name: download transction_list
      block:
        - get_url:
            url: http://apps.l33t.com/transaction_list
            dest: /home/ansible/transaction_list
        - debug: msg="File downloaded"
      rescue:
        - debug: msg="l33t.com appears to be down.  Try again later."

Configure the Playbook to Output a Message Whether It Was Successful or Not
An always block here will let us know that the playbook at least made an attempt to download the file:

---
- hosts: localhost
  tasks:
    - name: download transction_list
      block:
        - get_url:
            url: http://apps.l33t.com/transaction_list
            dest: /home/ansible/transaction_list
        - debug: msg="File downloaded"
      rescue:
        - debug: msg="l33t.com appears to be down.  Try again later."
      always:
        - debug: msg="Attempt completed."

Configure the Playbook to Replace All Instances of #BLANKLINE with the Line Break Character \n
We can use the replace module for this task, and we'll sneak it in between the get_url and first debug tasks.

---
- hosts: localhost
  tasks:
    - name: download transction_list
      block:
        - get_url:
            url: http://apps.l33t.com/transaction_list
            dest: /home/ansible/transaction_list
        - replace:
            path: /home/ansible/transaction_list
            regexp: "#BLANKLINE"
            replace: '\n'
        - debug: msg="File downloaded"
      rescue:
        - debug: msg="l33t.com appears to be down.  Try again later."
      always:
        - debug: msg="Attempt completed."

Verify Configuration by Running the Playbook
We can run the playbook with this:

[ansible@control1]$ ansible-playbook /home/ansible/report.yml

If all went well, we can read the downloaded text file:

[ansible@control1]$ cat /home/ansible/transaction_list

The file looks ok. Let's read the original, up where it sits on l33t.com:

[ansible@control1]$ curl apps.l33t.com/transaction_list

We'll see instances of #BLANKLINE there that our playbook actually turned into new lines.

Now we'll test to see how gracefully we deal with errors. We'll shut l33t.com down:

[ansible@control1]$ ./scripts/change_l33t.sh

Then we can run our playbook again:

[ansible@control1]$ ansible-playbook /home/ansible/report.yml

In the output, we see that the get_url task failed, but that the playbook did not stop executing. It outputted all of the appropriate messages.

#####################################################
Working with Ansible Templates, Variables, and Facts
#####################################################
A colleague was the unfortunate victim of a scam email, and their network account was compromised. Shortly after we finished helping them pack up their desk, our boss gave us the assignment to promote system security by deploying a hardened sudoers file. We need to create an Ansible template of the sudoers file.

We also need to create an accompanying playbook in /home/ansible/security.yml that will deploy this template to all servers in the default inventory.

"Ansible Templates overview: A template in Ansible is a file which contains all your configuration parameters, but the dynamic values are given as variables. During the playbook execution, depending on the conditions like which cluster you are using, the variables will be replaced with the relevant values."

"Ansible Facts overview: Simply put, Ansible facts are system properties that are collected by Ansible when it executes on a remote system. The facts contain useful details such as storage and network configuration about a target system."

"Ansible j2 file extension overview: A . j2 file is a text document containing the source code of an Ansible template written in the Jinja2 language. As such, it can be opened and directly edited in any text editor."


Create a Template sudoers File

[ansible@control1]$ vim /home/ansible/hardened.j2

Now that we're in Vim, we'll put these contents in the file:

%sysops {{ ansible_default_ipv4.address }} = (ALL) ALL
Host_Alias WEBSERVERS = {{ groups['web']|join(' ') }}
Host_Alias DBSERVERS = {{ groups['database']|join(' ') }}
%httpd WEBSERVERS = /bin/su - webuser
%dba DBSERVERS = /bin/su - dbuser

Create a Playbook

[ansible@control1]$ vim /home/ansible/security.yml

The security.yml file should look like this:

 ---
 - hosts: all
   become: yes
   tasks:
   - name: deploy sudo template
     template:
       src: /home/ansible/hardened.j2
       dest: /etc/sudoers.d/hardened
       validate: /sbin/visudo -cf %s

Run the Playbook

[ansible@control1]$ ansible-playbook /home/ansible/security.yml

The output will show that everything deployed fine, but we can check locally to make sure. Let's become root (with sudo su -) and then read our file:

[root@control1]$ cat /etc/sudoers.d/hardened

The custom IP and host aliases are in there.

####################################
Writing Your First Ansible Playbook
####################################

Playbooks are the heart of Ansible. They provide a means of executing numerous tasks across any number of systems. This exercise sets you on the path to Ansible mastery by allowing you to craft and execute an Ansible playbook.

Your supervisor has asked you to find a way to automate and audit basic system configuration for new servers in your environment. Given that Ansible is already configured at a basic level in your environment, the simplest solution would be to just write a playbook for bootstrapping your new hosts. Create a playbook called /home/ansible/bootstrap.yml to fulfill the following boot strap requirements:

All servers:

Edit /etc/hosts to include the following entry:

ansible.xyzcorp.com  169.168.0.1
Install elinks

Create the user xyzcorp_audit
Copy the files /home/ansible/motd and /home/ansible/issue to /etc/
Network servers:

Install nmap-ncat
Create the user xyzcorp_network
SysAdmin servers:

Copy /home/ansible/scripts.tgz from the control node to /mnt/storage
The Ansible control node has been configured for you and each testing server has already been configured for use with Ansible. The default inventory has been configured to include a the groups network and sysadmin. Each group includes a sample host.

Create a basic playbook for all servers in the Ansible inventory
Create a basic playbook in /home/ansible/bootstrap.yml that completes the noted task required for all servers in the Ansible inventory.

Create the file /home/ansible/bootstrap.yml and add the following content:

$ vim /home/ansible/bootstrap.yml

 ---
 - hosts: all
   become: yes
   tasks:
     - name: edit host file
       lineinfile:
         path: /etc/hosts
         line: "ansible.xyzcorp.com 169.168.0.1"
     - name: install elinks
       package:
         name: elinks
         state: latest
     - name: create audit user
       user:
         name: xyzcorp_audit
         state: present
     - name: update motd
       copy:
         src: /home/ansible/motd
         dest: /etc/motd
     - name: update issue
       copy:
         src: /home/ansible/issue
         dest: /etc/issue

Add a section to the playbook for the Network servers in the Ansible inventory

Add a section to the playbook in /home/ansible/bootstrap.yml that completes the noted task required for the Network servers in the Ansible inventory.

Create a play in the file /home/ansible/bootstrap.yml similar to the following:

  - hosts: network
    become: yes
    tasks:
      - name: install netcat
        yum:
          name: nmap-ncat
          state: latest
      - name: create network user
        user:
          name: xyzcorp_network
          state: present

Add a section to the playbook for the SysAdmin servers in the Ansible inventory

Add a section to the playbook in /home/ansible/bootstrap.yml that completes the noted task required for the s SysAdmin servers in the Ansible inventory.

Create a play in the file /home/ansible/bootstrap.yml similar to the following:

  - hosts: sysadmin
    become: yes
    tasks:
      - name: copy tarball
        copy:
          src: /home/ansible/scripts.tgz
          dest: /mnt/storage/

Execute playbook to verify your playbook works correctly

Execute playbook /home/ansible/bootstrap.yml to verify your playbook works correctly.

$ ansible-playbook /home/ansible/bootstrap.yml # from the control node.

#################################
Deploying Services Using Ansible
#################################
Ansible is frequently used to manage software configuration and deployment. This exercise allows students to deploy and configure an NFS server using key features of Ansible

Create the necessary template files on the Ansible control node

Create the files exports.j2 in /home/ansible with the noted content:

$ vim /home/ansible/exports.j2

Provide the following content for this file:

 {{ share_path }} *(rw)

Create the file etc.hosts.j2 in /home/ansible with the noted content:

$ vim /home/ansible/etc.hosts.j2

Provide the following content for this file:

 127.0.0.1    localhost {{ ansible_hostname}}
 {{ nfs_ip }}    {{ nfs_hostname }}

Create a playbook for the server 'nfs' in the Ansible inventory

Create a playbook in /home/ansible/nfs.yml that meets the provided specification for the server nfs in the ansible inventory.

Create a playbook in /home/ansible/nfs.yml with the following content:

$ vim /home/ansible/nfs.yml
 
 - hosts: nfs
   become: yes
   vars:
     share_path: /mnt/nfsroot
   tasks:
     - name: install nfs
       yum:
         name: nfs-utils
         state: latest
     - name: start and enable nfs-server
       service:
         name: nfs-server
         state: started
         enabled: yes
     - name: configure exports
       template:
         src: /home/ansible/exports.j2
         dest: /etc/exports
       notify: update nfs
   handlers:
     - name: update nfs exports
       command: exportfs -a
       listen: update nfs

Add a play for the remote host group

Edit /home/ansible/nfs.yml such that changes are executed on the remote host group to meet the provided requirements.

Edit /home/ansible/nfs.yml to contain the following content after the nfs play:

$ vim /home/ansible/nfs.yml

   - hosts: remote
     become: yes
     vars:
       nfs_ip: "{{ hostvars['nfs']['ansible_default_ipv4']['address'] }}"
       nfs_hostname: "{{ hostvars['nfs']['ansible_hostname'] }}"
     vars_files:
       - /home/ansible/user-list.txt
     tasks:
       - name: configure hostsfile
         template:
           src: /home/ansible/etc.hosts.j2
           dest: /etc/hosts
       - name: get file status
         stat:
           path: /opt/user-agreement.txt
         register: filestat
       - name: debug info
         debug:
           var: filestat
       - name: create users
         user:
           name: "{{ item }}"
         when:  filestat.stat.exists
         loop: "{{ users }}"

Execute playbook to verify your playbook works correctly

Execute playbook /home/ansible/nfs.yml to verify your playbook works correctly.

$ ansible-playbook /home/ansible/nfs.yml # from the control node.

#######################################
Advanced Features in Ansible Playbooks
#######################################
There are a number of features unique to Ansible playbooks which provide robust functionality. This exercise explores many of these features in a practical scenario of deploying a web server. Most notably, this exercise deals with confidential data in an Ansible vault and working with tags in Ansible playbooks

"Ansible Vault overview: Ansible Vault is a feature of ansible that allows you to keep sensitive data such as passwords or keys in encrypted files, rather than as plaintext in playbooks or roles. ... Alternately, you may specify the location of a password file or command Ansible to always prompt for the password in your ansible. cfg file."

"Ansible Tags overview: Tags help Ansible tasks to be selected from a play or play-book. If you need to play(execute) only certain specific tasks you can specify the tags needed while executing the ansible-playbook command."

Use ansible-vault to protect the confidential information
Use ansible-vault to encrypt /home/ansible/confidential to protect the confidential information stored within using the password "I love ansible".

Run ansible-vault encrypt /home/ansible/confidential and supply the password "I love ansible".
Create a playbook that deploys httpd on webservers
Create a playbook in /home/ansible/webserver.yml that deploys httpd on webservers. It should be tagged with base-install and contain a handler that restarts the httpd daemon that is flagged by both installation and service manipulation for httpd.

Create the file /home/ansible/webserver.yml and add the following content:

 vim /home/ansible/webserver.yml
 ---
 - hosts: webservers
   become: yes
   vars_files:
     - /home/ansible/confidential
   tasks:
     - name: install httpd
       yum:
         name: httpd
         state: latest
       notify: httpd service
       tags:
         - base-install
   handlers:
     - name: Restart and enable httpd
       service:
         name: httpd
         state: restarted
         enabled: yes
       listen: httpd service
Deploy the templates stored on the control node to the webservers group
Configure /home/ansible/webserver.yml to deploy the templates /home/ansible/vhost.conf.j2 and /home/ansible/htpasswd.j2 stored on the control node to the webservers group. httpd must restart on config change. The tasks should be tagged vhost.

Add the following text to /home/ansible/webserver.yml just before the handler section:

 vim /home/ansible/webserver.yml
 - name: configure virtual host
   template:
     src: /home/ansible/vhost.conf.j2
     dest: /etc/httpd/conf.d/vhost.conf
   notify: httpd service
   tags:
     - vhost
 - name: configure site auth
   template:
     src: /home/ansible/htpasswd.j2
     dest: /etc/httpd/conf/htpasswd
   notify: httpd service
   tags:
     - vhost
Asynchronously execute data-job on webservers
Configure /home/ansible/webserver.yml to asynchronously execute /opt/data-job.sh located on webservers with a timeout of 600 seconds and no polling. The task should be tagged with data-job.

Add the following text to /home/ansible/webserver.yml just before the handler section:

 vim /home/ansible/webserver.yml
 - name: run data job
   command: /opt/data-job.sh
   async: 600
   poll: 0
   tags:
     - data-job
Execute playbook to verify your playbook works correctly
Execute playbook /home/ansible/webserver.yml to verify your playbook works correctly.

Run ansible-playbook --ask-vault-pass /home/ansible/webserver.yml from the control node and provide the vault password "I love ansible".
